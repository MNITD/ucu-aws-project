AWSTemplateFormatVersion: "2010-09-09"
Description: "UCU Cloud Computing Final Project"
Parameters:
  LambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "echo"
  ApiGatewayStageName:
    Type: "String"
    AllowedPattern: "^[a-z0-9]+$"
    Default: "api"
Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
  S3BucketReadPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref S3Bucket
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: "/index.html"
          - ErrorCachingMinTTL: 300
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: "/index.html"
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-bucket-one
          ViewerProtocolPolicy: allow-all
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: s3-bucket-one
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          CloudFrontDefaultCertificate: true


  FileStorage:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private

  UserFilesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: fileId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: fileId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 10


  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      MfaConfiguration: "OFF"
      UserPoolName: user-pool-one
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 10
          RequireLowercase: False
          RequireNumbers: True
          RequireSymbols: False
          RequireUppercase: True
  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: user-pool-client-one
      GenerateSecret: False
      UserPoolId: !Ref CognitoUserPool
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub
            - "https://${Domain}"
            -  { Domain: !GetAtt CloudFrontDistribution.DomainName }
        - "http://localhost:3001"
      LogoutURLs:
        - !Sub
          - "https://${Domain}"
          - { Domain: !GetAtt CloudFrontDistribution.DomainName }
        - "http://localhost:3001"
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
    DependsOn:
      - CloudFrontDistribution
  CognitoUserPoolDomain:
    Type: "AWS::Cognito::UserPoolDomain"
    Properties:
      Domain: ucu-project
      UserPoolId: !Ref CognitoUserPool

  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: api-gateway
  ApiGatewayAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    DependsOn:
      - ApiGateway
    Properties:
      Name: cognito-authorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ApiGateway
      Type: "COGNITO_USER_POOLS"
      ProviderARNs:
        - !GetAtt "CognitoUserPool.Arn"

  FilesResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt "ApiGateway.RootResourceId"
      RestApiId: !Ref ApiGateway
      PathPart: 'files'
  FileResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref FilesResource
      RestApiId: !Ref ApiGateway
      PathPart: '{fileid}'

  FilesMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizerId: !Ref ApiGatewayAuthorizer
      AuthorizationType: "COGNITO_USER_POOLS"
      HttpMethod: "ANY"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
          - { LambdaArn: !GetAtt "LambdaFunction.Arn" }
      MethodResponses:
        - ResponseModels:
            application/json: "Empty"
          StatusCode: "200"
      ResourceId: !Ref FilesResource
      RestApiId: !Ref ApiGateway
  FileMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizerId: !Ref ApiGatewayAuthorizer
      AuthorizationType: "COGNITO_USER_POOLS"
      HttpMethod: "ANY"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
          - { LambdaArn: !GetAtt "LambdaFunction.Arn" }
      MethodResponses:
        - ResponseModels:
            application/json: "Empty"
          StatusCode: "200"
      ResourceId: !Ref FileResource
      RestApiId: !Ref ApiGateway
  OptionsMethod1:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref FilesResource
      HttpMethod: "OPTIONS"
      Integration:
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: "MOCK"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  OptionsMethod2:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref FileResource
      HttpMethod: "OPTIONS"
      Integration:
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: "MOCK"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "FilesResource"
      - "FileResource"
      - "FilesMethod"
      - "FileMethod"
      - "OptionsMethod1"
      - "OptionsMethod2"
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref ApiGatewayStageName

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: "lambdas/"
      Description: "My function"
      FunctionName: !Ref LambdaFunctionName
      Handler: "echo.handler"
      MemorySize: 128
      Role: !GetAtt "LambdaIAMRole.Arn"
      Runtime: "python3.7"
      Timeout: 10
      Environment:
        Variables:
          BucketName: !Ref FileStorage
          TableName: !Ref UserFilesTable
  LambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"
  LambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*"
          PolicyName: "lambda-logs"
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:s3:::${FileStorage}"
                  - !Sub "arn:aws:s3:::${FileStorage}/*"
          PolicyName: "lambda-s3"
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:Query"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UserFilesTable}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UserFilesTable}/stream/*"
          PolicyName: "lambda-dynamo"
  LambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunctionName}"
      RetentionInDays: 90

Outputs:
  BucketName:
    Description: 'S3 Bucket Name'
    Value: !Ref S3Bucket
  DistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
  Domain:
    Description: 'CloudFront Domain Name'
    Value:
      !Sub
        - 'https://${Domain}'
        - { Domain: !GetAtt CloudFrontDistribution.DomainName }
  AuthURL:
    Description: 'Cognito Domain'
    Value:
      !Sub
        - 'https://${Domain}.auth.${Region}.amazoncognito.com/login?response_type=token&client_id=${ClientId}&redirect_uri=https%3A%2F%2F${RedirectUri}'
        - { Domain: !Ref CognitoUserPoolDomain, Region: !Ref 'AWS::Region', ClientId: !Ref CognitoUserPoolClient, RedirectUri: !GetAtt CloudFrontDistribution.DomainName }
  ClientId:
    Description: 'Cognito Client ID'
    Value: !Ref CognitoUserPoolClient
  ApiURL:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}"
  LambdaArn:
    Value: !GetAtt "LambdaFunction.Arn"
