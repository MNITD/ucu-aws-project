AWSTemplateFormatVersion: "2010-09-09"
Description: "UCU Cloud Computing Final Project"
Parameters:
  LambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "echo"
  ApiGatewayStageName:
    Type: "String"
    AllowedPattern: "^[a-z0-9]+$"
    Default: "api"
Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
  S3BucketReadPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  FileStorage:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref S3Bucket
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: "/404.html"
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-bucket-one
          ViewerProtocolPolicy: allow-all
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: s3-bucket-one
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        PriceClass: 'PriceClass_All'

  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      MfaConfiguration: "OFF"
      UserPoolName: user-pool-one
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 10
          RequireLowercase: False
          RequireNumbers: True
          RequireSymbols: False
          RequireUppercase: True
  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: user-pool-client-one
      GenerateSecret: False
      UserPoolId: !Ref CognitoUserPool
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - "https://www.google.com"
      LogoutURLs:
        - "https://www.google.com"
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
  CognitoUserPoolDomain:
    Type: "AWS::Cognito::UserPoolDomain"
    Properties:
      Domain: ucu-project
      UserPoolId: !Ref CognitoUserPool

  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: api-gateway
  ApiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
          - { LambdaArn: !GetAtt "LambdaFunction.Arn", Region: !Ref 'AWS::Region' }
      ResourceId: !GetAtt "ApiGateway.RootResourceId"
      RestApiId: !Ref "ApiGateway"
  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "ApiGatewayRootMethod"
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref ApiGatewayStageName

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import os
          import boto3

          def handler(event, context):
            bucket_name = os.environ['BucketName']
            print(bucket_name)

            s3 = boto3.client('s3')
            print(s3.list_objects(Bucket=bucket_name))

            return {
              'body': 'Hello there {0}'.format(event['requestContext']['identity']['sourceIp']),
              'headers': {
                'Content-Type': 'text/plain',
                'Access-Control-Allow-Origin': '*'
              },
              'statusCode': 200
            }
      Description: "My function"
      FunctionName: !Ref LambdaFunctionName
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt "LambdaIAMRole.Arn"
      Runtime: "python3.7" # TODO change to node
      Timeout: 10
      Environment:
        Variables:
          BucketName: !Ref FileStorage
  LambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        !Sub
          - "arn:aws:execute-api:${Region}:${AccountId}:${ApiGateway}/*/POST/"
          - { Region: !Ref 'AWS::Region', AccountId: !Ref 'AWS::AccountId' }
  LambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub
                    - "arn:aws:logs:${Region}:${AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*"
                    - { Region: !Ref 'AWS::Region', AccountId: !Ref 'AWS::AccountId' }
          PolicyName: "lambda-logs"
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "*"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:s3:::${FileStorage}"
                  - !Sub "arn:aws:s3:::${FileStorage}/*"
          PolicyName: "lambda-s3"
  LambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunctionName}"
      RetentionInDays: 90

Outputs:
  BucketName:
    Description: 'S3 Bucket Name'
    Value: !Ref S3Bucket
  DistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
  Domain:
    Description: 'CloudFront Domain Name'
    Value: !GetAtt CloudFrontDistribution.DomainName
  AuthDomain:
    Description: 'Cognito Domain'
    Value:
      !Sub
        - '${Domain}.auth.${Region}.amazoncognito.com'
        - { Domain: !Ref CognitoUserPoolDomain, Region: !Ref 'AWS::Region' }
  ClientId:
    Description: 'Cognito Client ID'
    Value: !Ref CognitoUserPoolClient
  ApiURL:
    Value:
      !Sub
        - "https://${ApiGateway}.execute-api.${Region}.amazonaws.com/${ApiGatewayStageName}"
        - { Region: !Ref 'AWS::Region' }
  LambdaArn:
    Value: !GetAtt "LambdaFunction.Arn"

# TODO List
# create site v1 (index and 404) - done
# cf for creating bucket - done
# cf for creating cloudfront - done

# cf for lambda base - done
# cf for lambda in separate file
# cf for lambda accessing bucket - done
# cf for lambda accessing dynamo
# cf for lambda getting user id

# write lambda logic (save file) -
# write lambda logic (delete file) -
# write lambda logic (get files) -

# cf for auth - done
# cf for lambda protected with Authorizer

# create site v2 (login and sendfile)
# add SSL certificate for domain (https)

# cf for SPA
# setup svelte in site folder

# cf for programmatic access to bucket
# script for publishing site's files to bucket

# publish to GitHub

# https://user-pool-01.auth.us-east-2.amazoncognito.com/login?response_type=token&client_id=tpfe7r3tg7e7118079p3iplpm&redirect_uri=https%3A%2F%2Fwww.google.com
