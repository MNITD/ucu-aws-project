AWSTemplateFormatVersion: "2010-09-09"
Description: "UCU Cloud Computing Final Project"
Parameters:
  LambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "echo"
  ApiGatewayStageName:
    Type: "String"
    AllowedPattern: "^[a-z0-9]+$"
    Default: "api"
Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
  S3BucketReadPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  FileStorage:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private

  UserFilesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: fileId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: fileId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 10

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref S3Bucket
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: "/404.html"
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-bucket-one
          ViewerProtocolPolicy: allow-all
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: s3-bucket-one
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        PriceClass: 'PriceClass_All'

  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      MfaConfiguration: "OFF"
      UserPoolName: user-pool-one
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 10
          RequireLowercase: False
          RequireNumbers: True
          RequireSymbols: False
          RequireUppercase: True
  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: user-pool-client-one
      GenerateSecret: False
      UserPoolId: !Ref CognitoUserPool
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - "https://www.google.com"
      LogoutURLs:
        - "https://www.google.com"
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
  CognitoUserPoolDomain:
    Type: "AWS::Cognito::UserPoolDomain"
    Properties:
      Domain: ucu-project
      UserPoolId: !Ref CognitoUserPool

  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: api-gateway
  ProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt "ApiGateway.RootResourceId"
      RestApiId: !Ref "ApiGateway"
      PathPart: '{proxy+}'
  RootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "ANY"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
          - { LambdaArn: !GetAtt "LambdaFunction.Arn" }
      ResourceId: !Ref "ProxyResource"
      RestApiId: !Ref "ApiGateway"
  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "RootMethod"
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref ApiGatewayStageName

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import os
          import uuid
          import time
          import json
          import boto3
          import base64
          import re

          bucket_name = os.environ['BucketName']
          table_name = os.environ['TableName']

          headers = {'Content-Type':'application/json','Access-Control-Allow-Origin':'*'}

          def handler(event, context):
            print(event, context)

            path = event['path'].split('/')
            if path[1] == 'files':
              dynamodb = boto3.resource('dynamodb').Table(table_name)
              s3 = boto3.client('s3')
              httpMethod = event.get('httpMethod')
              auth_token = event['headers']['Authorization'].split('Bearer ')[1] + "==="
              decoded = str(base64.b64decode(auth_token))
              user_id = re.findall(r'(?<=sub":").+(?=","aud)', decoded)[0]

              if len(path) > 2:
                if httpMethod == 'GET':
                  file_id = path[2]
                  print('get file', file_id)

                  print(file_id, user_id)
                  item = dynamodb.get_item(
                    Key={
                      'userId': user_id,
                      'fileId': file_id,
                    }
                  ).get('Item')
                  if item != None:
                    obj = s3.get_object(Bucket=bucket_name, Key=file_id)['Body'].read()

                    res = {
                      'file': str(base64.b64encode(obj), "utf-8"),
                      'fileName': item.get('fileName'),
                      'createdAt': str(item.get('createdAt'))
                    }
                    return {'body': json.dumps(res), 'headers': headers,'statusCode':200}
                  else:
                    return {'body':json.dumps({'error': 'File not found'}),'headers':headers,'statusCode':404}
                if httpMethod == 'DELETE':
                  print('delete file', path[2])
              elif httpMethod == 'POST':
                print('post file')

                body = json.loads(event['body'])
                file_content = base64.b64decode(body.get('file'))
                file_name = body.get('name')
                file_id = str(uuid.uuid4())
                s3.put_object(Bucket=bucket_name, Key=file_id, Body=file_content)
                item = {
                  'userId': user_id,
                  'fileId': file_id,
                  'fileName': file_name,
                  'createdAt': int(time.time())
                }
                dynamodb.put_item(Item=item)
                return {'body':json.dumps(item),'headers':headers,'statusCode':200}
              elif httpMethod == 'GET':
                print('get files')
            else:
              return {
                'body': 'Resourse not found',
                'headers': {
                  'Content-Type': 'text/plain',
                  'Access-Control-Allow-Origin': '*'
                },
                'statusCode': 404
              }

            # s3 = boto3.client('s3')
            # print(s3.list_objects(Bucket=bucket_name))

            return {
              'body': json.dumps({'message': 'Hello there {0}'.format(event['requestContext']['identity']['sourceIp'])}),
              'headers': headers,
              'statusCode': 200
            }
      Description: "My function"
      FunctionName: !Ref LambdaFunctionName
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt "LambdaIAMRole.Arn"
      Runtime: "python3.7" # TODO change to node
      Timeout: 10
      Environment:
        Variables:
          BucketName: !Ref FileStorage
          TableName: !Ref UserFilesTable
  LambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"
  LambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*"
          PolicyName: "lambda-logs"
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "*"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:s3:::${FileStorage}"
                  - !Sub "arn:aws:s3:::${FileStorage}/*"
          PolicyName: "lambda-s3"
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "*"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UserFilesTable}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UserFilesTable}/stream/*"
          PolicyName: "lambda-dynamo"
  LambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunctionName}"
      RetentionInDays: 90

Outputs:
  BucketName:
    Description: 'S3 Bucket Name'
    Value: !Ref S3Bucket
  DistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
  Domain:
    Description: 'CloudFront Domain Name'
    Value: !GetAtt CloudFrontDistribution.DomainName
  AuthDomain:
    Description: 'Cognito Domain'
    Value:
      !Sub
        - '${Domain}.auth.${Region}.amazoncognito.com'
        - { Domain: !Ref CognitoUserPoolDomain, Region: !Ref 'AWS::Region' }
  ClientId:
    Description: 'Cognito Client ID'
    Value: !Ref CognitoUserPoolClient
  ApiURL:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}"
  LambdaArn:
    Value: !GetAtt "LambdaFunction.Arn"

# TODO List
# create site v1 (index and 404) - done
# cf for creating bucket - done
# cf for creating cloudfront - done

# cf for lambda base - done
# cf for lambda in separate file -
# cf for lambda accessing bucket - done
# cf for lambda accessing dynamo - done
# cf for lambda getting user id - done

# write lambda logic (save file) - done
# write lambda logic (delete file) -
# write lambda logic (get files) -

# cf for auth - done
# cf for lambda protected with Authorizer -

# create site v2 (login and sendfile) -
# add SSL certificate for domain (https) -

# cf for SPA -
# setup svelte in site folder -

# cf for programmatic access to bucket -
# script for publishing site's files to bucket -

# publish to GitHub -
